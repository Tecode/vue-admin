const fs = require('fs');
const path = require('path');
const LRU = require('lru-cache');
const express = require('express');
const favicon = require('serve-favicon');
const compression = require('compression');
const resolve = file => path.resolve(__dirname, file);
const {createBundleRenderer} = require('vue-server-renderer');
const useragent = require('express-useragent');
const cookieParser = require('cookie-parser');
const formidable = require('formidable');

const isProd = process.env.NODE_ENV === 'production';
const useMicroCache = process.env.MICRO_CACHE !== 'false';
const serverInfo =
`express/${require('express/package.json').version} ` +
`vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

const app = express();

const template = fs.readFileSync(resolve('./src/index.template.html'), 'utf-8');

function createRenderer(bundle, options) {
	// https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
	return createBundleRenderer(bundle, Object.assign(options, {
		template,
		// for component caching
		cache: LRU({
			max: 1000,
			maxAge: 1000 * 60 * 15
		}),
		// this is only needed when vue-server-renderer is npm-linked
		basedir: resolve('./dist'),
		// recommended for performance
		runInNewContext: false
	}))
}

let renderer;
let readyPromise;
if (isProd) {
	// In production: create server renderer using built server bundle.
	// The server bundle is generated by vue-ssr-webpack-plugin.
	const bundle = require('./dist/vue-ssr-server-bundle.json');
	// The client manifests are optional, but it allows the renderer
	// to automatically infer preload/prefetch links and directly add <script>
	// tags for any async chunks used during render, avoiding waterfall requests.
	const clientManifest = require('./dist/vue-ssr-client-manifest.json');
	renderer = createRenderer(bundle, {
		clientManifest
	})
} else {
	// In development: setup the dev server with watch and hot-reload,
	// and create a new renderer on bundle / index template update.
	readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
		renderer = createRenderer(bundle, options)
	})
}

const serve = (path, cache) => express.static(resolve(path), {
	maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
});
// 遍历图片
const objForEach = (obj, fn) => {
	let key, result;
	for (key in obj) {
		if (obj.hasOwnProperty(key)) {
			result = fn.call(obj, key, obj[key]);
			if (result === false) {
				break
			}
		}
	}
};
// 保存上传的文件
const saveFiles = (req) => {
	return new Promise((resolve, reject) => {
		const imgLinks = [];
		const form = new formidable.IncomingForm();
		form.uploadDir = "./temp";
		form.maxFieldsSize = 3 * 1024 * 1024;
		form.parse(req, function (err, fields, files) {
			if (err) {
				reject('formidable, form.parse err', err.stack)
			}
			// 存储图片的文件夹
			const storePath = path.resolve(__dirname, 'uploadfolder');
			if (!fs.existsSync(storePath)) {
				fs.mkdirSync(storePath)
			}

			// 遍历所有上传来的图片
			objForEach(files, (name, file) => {
				// 图片临时位置
				const tempFilePath = file.path;
				// 图片名称和路径
				let type = '';
				if (file.name.indexOf('.jpg') > -1) {
					type = '.jpg'
				} else if (file.name.indexOf('.gif') > -1) {
					type = '.gif'
				}else if (file.name.indexOf('.svg') > -1) {
					type = '.svg'
				}else if (file.name.indexOf('.png') > -1) {
					type = '.png'
				}else if (file.name.indexOf('.jpeg') > -1) {
					type = '.jpeg'
				}else {
					reject({
						errorCode: 400005,
						error: '图片格式错误'
					})
				}
				const fileName = `mysite-time${Date.now()}${type}`;
				const fullFileName = path.join(storePath, fileName);
				// 将临时文件保存为正式文件
				fs.renameSync(tempFilePath, fullFileName);
				// 存储链接
				imgLinks.push(`${isProd ? 'https://admin.soscoon.com' : ''}/image/` + fileName)
			});
			// // 重新设置静态文件缓存
			// setStaticCache();

			// 返回结果
			resolve({
				errno: 0,
				data: imgLinks
			})
		})
	})
};

app.use(cookieParser());
app.use(useragent.express());
app.use(compression({threshold: 0}));
app.use(favicon('./public/logo-48.png'));
app.use('/dist', serve('./dist', true));
app.use('/public', serve('./public', true));
// app.use('/manifest.json', serve('./manifest.json', true));
app.use('/service-worker.js', serve('./dist/service-worker.js'));
app.use('/image', express.static('uploadfolder'));

// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
const microCache = LRU({
	max: 100,
	maxAge: 1000
});

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
const isCacheable = req => useMicroCache;

function render(req, res) {

	const s = Date.now();

	res.setHeader("Content-Type", "text/html");
	res.setHeader("Server", serverInfo);

	const handleError = err => {
		if (err && err.code === 404) {
			res.status(404).end('404 | Page Not Found')
		} else {
			// Render Error Page or Redirect
			res.status(500).end('500 | Internal Server Error');
			console.error(`error during render : ${req.url}`);
			console.error(err.stack)
		}
	};

	const cacheable = isCacheable(req);
	if (cacheable) {
		const hit = microCache.get(req.url);
		if (hit) {
			if (!isProd) {
				console.log(`cache hit!`)
			}
			return res.end(hit)
		}
	}

	const context = {
		title: 'aming web site', // default title
		url: req.url
	};
	renderer.renderToString(context, (err, html) => {
		if (err) {
			return handleError(err)
		}
		res.end(html);
		if (cacheable) {
			microCache.set(req.url, html)
		}
		if (!isProd) {
			console.log(`whole request: ${Date.now() - s}ms`)
		}
	})
}
// 上传图片
app.post('/upload', function (req, res) {
	// 获取数据
	saveFiles(req).then((data) => {
		// 返回结果
		res.send(JSON.stringify(data));
	}).catch((error) => {
		res.send({
			errorCode: 400500,
			error: error
		});
		assert.isNotOk(error, 'Promise error');
		done();
	});

});

app.get('*', isProd ? render : (req, res) => {
	readyPromise.then(() => render(req, res))
});

const port = process.env.PORT || 8088;
app.listen(port, () => {
	console.log(`server started at localhost:${port}`)
});
